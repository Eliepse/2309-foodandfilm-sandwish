import { app, BrowserWindow, ipcMain, session } from "electron";
import args from "node-args";
import process from "process";
import path from "path";
import fs from "fs";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

type Args = {
  help?: string;
  media?: string;
  time?: string;
};

const parameters: Args = args as Args;

if (process.argv.includes("--help")) {
  console.info("--help                      Display this help message");
  console.info("--media [absolutePath]      Path to the video to play");
  console.info(
    "--time [number]             Time it takes for a frame to cross the entire screen",
  );
  process.exit();
}

if (!parameters.media) {
  console.error("The parameter --media must be valid, none given");
  process.exit(1);
}

if (!fs.existsSync(getMediaPath())) {
  console.error("Can't access the video at: " + getMediaPath());
  process.exit(1);
}

function getMediaPath(): string {
  const mediaPath = parameters.media;

  if (path.isAbsolute(mediaPath)) {
    return path.resolve(mediaPath);
  }

  return path.join(process.cwd(), mediaPath);
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  ipcMain.on("get-resource-path", (e) => {
    e.returnValue = getMediaPath();
  });
  ipcMain.on("get-is-prod", (e) => {
    e.returnValue = app.isPackaged;
  });
  ipcMain.on("get-time", (e) => {
    e.returnValue = Number(parameters.time);
  });

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": ["*"],
      },
    });
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "Food & Film - Expo Aubervillier - Sandwich",
    width: 1800,
    height: 800,
    fullscreen: app.isPackaged,
    // simpleFullscreen: true,
    fullscreenable: true,
    alwaysOnTop: app.isPackaged,
    autoHideMenuBar: true,
    webPreferences: {
      webSecurity: false,
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // const whichScreen = screen.getDisplayNearestPoint({x: winBounds.x, y: winBounds.y});

  mainWindow.maximize();
  mainWindow.show();

  // Open the DevTools.
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
