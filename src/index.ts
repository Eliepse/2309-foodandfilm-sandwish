import { app, BrowserWindow, ipcMain, session } from "electron";
import { PeerServer } from "peer";
import args from "node-args";
import * as process from "process";
import * as path from "path";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

type Args = {
  mode?: string;
  id?: string;
  peerCount?: string;
  mediaName?: string;
  host?: string;
};

const parameters: Args = args as Args;
const isMaster = parameters.mode === "master";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  let peerServer: ReturnType<typeof PeerServer>;

  if (isMaster) {
    peerServer = PeerServer({
      port: 9009,
      path: "/sandwich",
      key: "secure-sandwich",
      allow_discovery: true,
    });
    console.log("Peer server started");
  }

  ipcMain.handle(
    "peerId",
    () =>
      (isMaster ? "0" : parameters.id) ?? (Math.random() * 100000).toFixed(0),
  );
  ipcMain.on("get-resource-path", (e) => {
    e.returnValue = path.join(
      app.isPackaged
        ? process.resourcesPath
        : path.join(app.getAppPath(), "media"),
      parameters.mediaName ?? "chrono.mp4",
    );
  });
  ipcMain.on("get-is-prod", (e) => {
    e.returnValue = app.isPackaged;
  });
  ipcMain.on("get-peer-count", (e) => {
    e.returnValue = app.isPackaged;
  });
  ipcMain.on("get-server-host", (e) => {
    e.returnValue = isMaster ? "localhost" : parameters.host ?? "192.168.1.1";
  });

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": ["*"],
      },
    });
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: isMaster ? "Master" : "Listener",
    width: 1800,
    height: 800,
    webPreferences: {
      webSecurity: false,
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  console.debug(app.getAppPath());
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  if (!peerServer) {
    return;
  }

  peerServer.on("connection", (client) => {
    console.debug(client.getId());
    mainWindow.webContents.send("peerConnected", client.getId());
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
